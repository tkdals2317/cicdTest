# 1 워크플로 이름 지정
name : CI

# 2 워크플로가 시작될 조건(event) 지정
on:
  merge:
    branches:
      - develop

# 3 워크플로가 실행될 작업들을 정의
jobs:
  build:
    # 4. 워크플로가 실행될 환경 지정
    runs-on: ubuntu-latest

    steps:
      # 5. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 6. Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # 7. Gradle 패키지 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 8. Gradle로 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # 9. 테스트 실행
      - name: Run tests
        run: ./gradlew test

      # 10. AWS ECR에 로그인
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # 11. Docker 이미지 빌드, 태그 및 푸시
      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: cicd-test
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 12. Amazon ECS에 배포
      - name: Deploy to Amazon ECS
        env:
          AWS_REGION: us-west-2
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: cicd-test
          IMAGE_TAG: ${{ github.sha }}
          ECS_SERVICE: cicd-test-service
          ECS_CLUSTER: cicd-test-cluster
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment